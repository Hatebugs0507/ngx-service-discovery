user              root;
worker_processes  auto;

error_log  logs/error.log;
pid        logs/nginx.pid;
daemon     off;

events {
    use epoll;
    worker_connections  1024;
}

http {
    lua_shared_dict HOST_ACCESS_COUNT 128m;
    lua_shared_dict HEALTH_CHECK_STATUS 128m; # XXX: how many sizes
    lua_code_cache on;
    lua_package_path "${prefix}/plugins/?.lua;;";
    init_worker_by_lua_file plugins/InitWorker.lua;

    upstream backend {
        # only a fake server, set it to an arbitrary value
        server 127.0.0.1:8080;
        balancer_by_lua_file plugins/Balancer.lua;
    }

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '[$request_time|$upstream_response_time]$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nodelay     on;
    keepalive_timeout  0;
    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        location / {
            default_type text/plain;

            # TODO: set proxy timeout
            # TODO: set proxy retries
            proxy_set_header Host $host;
            proxy_set_header Request-Id $http_request_id;
            add_header Request-Id $http_request_id always;
            add_header Upstream-Addr $upstream_addr always;
            proxy_pass http://backend;
        }
    }
}

